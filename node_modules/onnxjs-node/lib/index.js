"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var onnxjs = __importStar(require("onnxjs"));
var os = __importStar(require("os"));
// check if Node.js
if (typeof process !== 'undefined' && process && process.release && process.release.name === 'node') {
    // check if 64-bit platform
    if (os.arch() !== 'x64') {
        throw new Error("onnxruntime does not support architecture '" + os.arch() + "'");
    }
    // check if Linux or Windows
    if (['win32', 'linux', 'darwin'].indexOf(os.platform()) === -1) {
        throw new Error("onnxruntime does not support platform '" + os.platform() + "'");
    }
    // check endianness
    if (os.endianness() !== 'LE') {
        throw new Error("onnxruntime node binding does not support non little-endian platform");
    }
    // force re-assign overwritten property 'InferenceSession'
    onnxjs.InferenceSession = require('./inference-session-override').OnnxRuntimeInferenceSession;
}
module.exports = onnxjs;
//# sourceMappingURL=index.js.map