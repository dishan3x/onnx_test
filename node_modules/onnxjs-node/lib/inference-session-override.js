"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var onnxjs_1 = require("onnxjs");
var Binding = __importStar(require("./binding"));
var OnnxjsInferenceSession = onnxjs_1.InferenceSession;
var OnnxRuntimeInferenceSession = /** @class */ (function () {
    function OnnxRuntimeInferenceSession(config) {
        var useOnnxRuntime = !config || typeof config.backendHint !== 'string' || config.backendHint === 'onnxruntime';
        if (useOnnxRuntime) {
            this.binding = new Binding.binding.InferenceSession();
        }
        else {
            this.onnxjsFallback = new OnnxjsInferenceSession(config);
            console.log('fallback');
        }
    }
    OnnxRuntimeInferenceSession.prototype.loadModel = function (arg0, arg1, arg2) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.onnxjsFallback) {
                    return [2 /*return*/, this.onnxjsFallback.loadModel(arg0, arg1, arg2)];
                }
                if (typeof arg0 !== 'string') {
                    throw new TypeError('a string model path is expected');
                }
                if (!this.binding) {
                    throw new Error('binding is not assigned');
                }
                this.binding.loadModel(arg0);
                return [2 /*return*/];
            });
        });
    };
    OnnxRuntimeInferenceSession.prototype.run = function (inputFeed, options) {
        return __awaiter(this, void 0, void 0, function () {
            var input, output, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.onnxjsFallback) {
                            return [2 /*return*/, this.onnxjsFallback.run(inputFeed, options)];
                        }
                        if (!this.binding) {
                            throw new Error('session not initialized');
                        }
                        input = new Array(this.binding.inputNames.length);
                        if (!(inputFeed instanceof Map)) return [3 /*break*/, 2];
                        this.binding.inputNames.forEach(function (name, i) {
                            var t = inputFeed.get(name);
                            if (!t) {
                                throw new Error("missing input '" + name + "'");
                            }
                            input[i] = { data: t.data, dims: t.dims, type: getTensorDataTypeFromString(t.type) };
                        });
                        return [4 /*yield*/, this.binding.run(input)];
                    case 1:
                        output = _a.sent();
                        return [3 /*break*/, 6];
                    case 2:
                        if (!Array.isArray(inputFeed)) return [3 /*break*/, 4];
                        inputFeed.forEach(function (t, i) {
                            input[i] = { data: t.data, dims: t.dims, type: getTensorDataTypeFromString(t.type) };
                        });
                        return [4 /*yield*/, this.binding.run(input)];
                    case 3:
                        output = _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        this.binding.inputNames.forEach(function (name, i) {
                            var t = inputFeed[name];
                            if (!t) {
                                throw new Error("missing input '" + name + "'");
                            }
                            input[i] = { data: t.data, dims: t.dims, type: getTensorDataTypeFromString(t.type) };
                        });
                        return [4 /*yield*/, this.binding.run(input)];
                    case 5:
                        output = _a.sent();
                        _a.label = 6;
                    case 6:
                        result = new Map();
                        this.binding.outputNames.forEach(function (name, i) {
                            var t = output[i];
                            result.set(name, new onnxjs_1.Tensor(t.data, getTensorDataTypeFromEnum(t.type), t.dims));
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    OnnxRuntimeInferenceSession.prototype.startProfiling = function () {
        if (this.onnxjsFallback) {
            return this.onnxjsFallback.startProfiling();
        }
        throw new Error('Method not implemented.');
    };
    OnnxRuntimeInferenceSession.prototype.endProfiling = function () {
        if (this.onnxjsFallback) {
            return this.onnxjsFallback.endProfiling();
        }
        throw new Error('Method not implemented.');
    };
    return OnnxRuntimeInferenceSession;
}());
exports.OnnxRuntimeInferenceSession = OnnxRuntimeInferenceSession;
function getTensorDataTypeFromString(type) {
    switch (type) {
        case 'float32':
            return 1;
        case 'int32':
            return 6;
        case 'bool':
            return 9;
        default:
            return -1;
    }
}
function getTensorDataTypeFromEnum(type) {
    switch (type) {
        case 1:
            return 'float32';
        case 6:
            return 'int32';
        case 9:
            return 'bool';
        case 8:
            return 'string';
        default:
            throw new Error("unsupported data type: " + type);
    }
}
//# sourceMappingURL=inference-session-override.js.map